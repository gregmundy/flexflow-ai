import { NextRequest, NextResponse } from 'next/server';
import { z } from 'zod';
import { 
  createWorkoutNetwork,
  generateFallbackWorkout,
  type WorkoutGenerationParams,
  type WorkoutGenerationState,
} from '@/lib/ai/agentkit-trainers';

/**
 * Direct AgentKit workout generation API (synchronous)
 * Returns the actual generated workout immediately
 */

const WorkoutGenerationRequest = z.object({
  coachId: z.enum(['MAX', 'SAGE', 'ZARA', 'ACE', 'KAI', 'NOVA', 'BLAZE', 'RILEY', 'MARCO']),
  workoutType: z.enum(['strength', 'bodyweight', 'flexibility', 'mobility', 'cardio', 'hiit']).default('strength'),
  duration: z.number().min(10).max(120).default(30),
  equipment: z.array(z.string()).default([]),
  fitnessLevel: z.enum(['beginner', 'intermediate', 'advanced']).default('beginner'),
  preferences: z.object({
    intensity: z.enum(['low', 'moderate', 'high']).optional(),
    variety: z.enum(['minimal', 'balanced', 'high']).optional(),
    restTime: z.enum(['short', 'standard', 'long']).optional(),
  }).default({}),
});

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const validatedData = WorkoutGenerationRequest.parse(body);
    
    console.log('üéØ Direct AgentKit workout generation:', {
      coachId: validatedData.coachId,
      workoutType: validatedData.workoutType,
      duration: validatedData.duration,
    });
    
    const startTime = Date.now();
    
    try {
      // Mock user profile for testing
      const userProfile = {
        profile: {
          fitnessLevel: validatedData.fitnessLevel,
          availableEquipment: validatedData.equipment,
          primaryGoals: ['build_strength', 'muscle_tone'],
          injuriesLimitations: null,
        },
        preferences: {
          workoutIntensityPreference: validatedData.preferences.intensity || 'moderate',
          exerciseVarietyPreference: validatedData.preferences.variety || 'balanced', 
          restTimePreferences: validatedData.preferences.restTime || 'standard',
        },
      };

      // Prepare workout parameters
      const workoutParams: WorkoutGenerationParams = {
        workoutType: validatedData.workoutType,
        duration: validatedData.duration,
        fitnessLevel: validatedData.fitnessLevel,
        equipment: validatedData.equipment,
        primaryGoals: ['build_strength', 'muscle_tone'],
        preferences: {
          intensity: validatedData.preferences.intensity || 'moderate',
          variety: validatedData.preferences.variety || 'balanced',
          restTime: validatedData.preferences.restTime || 'standard',
        },
        limitations: undefined,
      };

      console.log(`ü§ñ Starting AgentKit workout generation for ${validatedData.coachId}...`);
      
      // Create the workout network for the selected trainer
      const network = createWorkoutNetwork(validatedData.coachId);
      
      // Initialize network state
      const initialState: WorkoutGenerationState = {
        params: workoutParams,
        userProfile: userProfile,
      };
      
      // Set initial state
      network.state.data = initialState;
      
      // Generate workout prompt for the trainer
      const prompt = `Generate a ${validatedData.duration}-minute ${validatedData.workoutType} workout for a ${validatedData.fitnessLevel} level user.
      
Available equipment: ${workoutParams.equipment.join(', ') || 'bodyweight only'}
Primary goals: ${workoutParams.primaryGoals.join(', ')}

Workout preferences:
- Intensity: ${workoutParams.preferences.intensity}
- Variety: ${workoutParams.preferences.variety}
- Rest time preference: ${workoutParams.preferences.restTime}

Create a workout that showcases your unique coaching personality and expertise. Remember to use your authentic voice in all exercise instructions!`;

      // Run the AgentKit network
      console.log('üöÄ Running AgentKit network...');
      const result = await network.run(prompt);
      const endTime = Date.now();
      
      console.log(`‚úÖ AgentKit generation completed in ${endTime - startTime}ms`);
      console.log('Network result:', result);
      console.log('Network final state:', network.state.data);
      
      // Check if workout was successfully generated
      const finalState = network.state.data as WorkoutGenerationState;
      
      if (finalState.validationPassed && finalState.generatedWorkout) {
        console.log('üéâ Real AI workout generated successfully!');
        
        return NextResponse.json({
          success: true,
          message: `AgentKit workout generated by ${validatedData.coachId} trainer`,
          coachId: validatedData.coachId,
          workoutType: validatedData.workoutType,
          duration: validatedData.duration,
          exercises: finalState.generatedWorkout,
          generationTime: endTime - startTime,
          agentKitPowered: true,
          realLLM: true,
          fallbackUsed: false,
        });
      } else {
        // Generation failed, use fallback
        console.warn('‚ö†Ô∏è AgentKit generation failed, using fallback workout');
        
        const fallbackWorkout = generateFallbackWorkout(validatedData.workoutType, validatedData.fitnessLevel, validatedData.coachId);
        
        return NextResponse.json({
          success: true,
          message: `Fallback workout generated for ${validatedData.coachId} trainer`,
          coachId: validatedData.coachId,
          workoutType: validatedData.workoutType,
          duration: validatedData.duration,
          exercises: fallbackWorkout,
          generationTime: endTime - startTime,
          agentKitPowered: false,
          realLLM: false,
          fallbackUsed: true,
          error: 'AgentKit workout generation failed validation',
        });
      }
      
    } catch (error) {
      console.error('‚ùå AgentKit generation error:', error);
      
      const fallbackWorkout = generateFallbackWorkout(validatedData.workoutType, validatedData.fitnessLevel, validatedData.coachId);
      
      return NextResponse.json({
        success: true,
        message: `Fallback workout generated for ${validatedData.coachId} trainer`,
        coachId: validatedData.coachId,
        workoutType: validatedData.workoutType,
        duration: validatedData.duration,
        exercises: fallbackWorkout,
        generationTime: Date.now() - startTime,
        agentKitPowered: false,
        realLLM: false,
        fallbackUsed: true,
        error: error instanceof Error ? error.message : 'Unknown AgentKit error',
      });
    }
    
  } catch (error) {
    console.error('Direct AgentKit workout generation API error:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json({
        success: false,
        error: 'Invalid request data',
        details: error.issues,
      }, { status: 400 });
    }
    
    return NextResponse.json({
      success: false,
      error: 'Failed to generate workout',
      message: error instanceof Error ? error.message : 'Unknown error',
    }, { status: 500 });
  }
}

export async function GET() {
  return NextResponse.json({
    message: 'Direct AgentKit Workout Generation API',
    description: 'Generates workouts synchronously and returns actual AI-generated exercises',
    availableTrainers: [
      'MAX - Intense powerhouse coach',
      'SAGE - Mindful wisdom guide', 
      'ZARA - Energetic dynamo',
      'ACE - Supportive friend',
      'KAI - Competitive warrior',
      'NOVA - Creative innovator', 
      'BLAZE - High-intensity rocket',
      'RILEY - Balanced guide',
      'MARCO - Precision strategist',
    ],
    supportedWorkoutTypes: ['strength', 'bodyweight', 'flexibility', 'mobility', 'cardio', 'hiit'],
    endpoint: 'POST /api/workouts/generate-direct',
    realLLM: true,
  });
}